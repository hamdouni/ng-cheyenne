<%
	response/set-header 'content-type "application/json"

	escape: use [mp ch es encode][
	    mp: [#"^/" "\n" #"^M" "\r" #"^-" "\t" #"^"" "\^"" #"\" "\\" #"/" "\/"]
	    ch: complement es: charset extract mp 2
	    encode: func [here][change/part here select mp here/1 1]

	    func [txt][
	        parse/all txt [any [txt: some ch | es (txt: encode txt) :txt]]
	        head txt
	    ]
	]

	do-sql-json: func[db_name [word!] db_query [string! block!] /local json err db-error res idx port item column] [
		db-error: none		
			
		json: "["
		if error? err: try [res: do-sql db_name db_query][res: none db-error: disarm err]
		if res [
			port: do-sql/info to-word db_name db_query
			foreach item res [
				idx: 1
				append json "{"
				foreach column reduce port/locals/columns [
					append json rejoin [{"} column/name {":"} escape form pick item idx {",}]
					idx: idx + 1
				]
				json: head remove back tail json
				append json "},"
			]
		]
		json: head remove back tail json
		append json "]"
	?? db-error
		json
	]

	validate [
		name string!
	]
	name: request/content/name

?? name

	json: do-sql-json 'esca [{select pv_id,pv_nom from pdv where pv_nom like ?} name]

%><%=json%>